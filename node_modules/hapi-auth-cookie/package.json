{
  "name": "hapi-auth-cookie",
  "description": "Cookie authentication plugin",
  "version": "1.0.3",
  "author": {
    "name": "Eran Hammer",
    "email": "eran@hueniverse.com",
    "url": "http://hueniverse.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/spumko/hapi-auth-cookie"
  },
  "main": "index",
  "keywords": [
    "hapi",
    "plugin",
    "auth",
    "cookie",
    "session"
  ],
  "engines": {
    "node": ">=0.10.22"
  },
  "dependencies": {
    "boom": "2.x.x",
    "hoek": "2.x.x"
  },
  "peerDependencies": {
    "hapi": ">=2.x.x"
  },
  "devDependencies": {
    "hapi": "5.x.x",
    "lab": "3.x.x"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/spumko/hapi-auth-cookie/raw/master/LICENSE"
    }
  ],
  "readme": "<a href=\"https://github.com/spumko\"><img src=\"https://raw.github.com/spumko/spumko/master/images/from.png\" align=\"right\" /></a>\n### hapi-auth-cookie\n\n[**hapi**](https://github.com/spumko/hapi) Cookie authentication plugin\n\n[![Build Status](https://secure.travis-ci.org/spumko/hapi-auth-cookie.png)](http://travis-ci.org/spumko/hapi-auth-cookie)\n\nCookie authentication provides a simple cookie-based session management. The user has to be authenticated via other means, typically a web\nform, and upon successful authentication, receive a reply with a session cookie. Subsequent requests containing the session cookie are authenticated\n(the cookie uses [Iron](https://github.com/hueniverse/iron) to encrypt and sign the session content) and validated via the provided `validateFunc`\nin case the cookie's encrypted content requires validation on each request. Note that cookie operates as a bearer token and anyone in possession\nof the cookie content can use it to impersonate its true owner. The `'cookie`' scheme takes the following required options:\n\n- `cookie` - the cookie name. Defaults to `'sid'`.\n- `password` - used for Iron cookie encoding.\n- `ttl` - sets the cookie expires time in milliseconds. Defaults to single browser session (ends when browser closes).\n- `domain` - sets the cookie Domain value. Defaults to none.\n- `clearInvalid` - if `true`, any authentication cookie that fails validation will be marked as expired in the response and cleared. Defaults to `false`.\n- `isSecure` - if `false`, the cookie is allowed to be transmitted over insecure connections which exposes it to attacks. Defaults to `true`.\n- `isHttpOnly` - if `false`, the cookie will not include the 'HttpOnly' flag. Defaults to `true`.\n- `redirectTo` - optional login URI to redirect unauthenticated requests to. Defaults to no redirection.\n- `appendNext` - if `true` and `redirectTo` is `true`, appends the current request path to the query component of the `redirectTo` URI using the\n  parameter name `'next'`. Set to a string to use a different parameter name. Defaults to `false`.\n- `validateFunc` - an optional session validation function used to validate the content of the session cookie on each request. Used to verify that the\n  internal session state is still valid (e.g. user account still exists). The function has the signature `function(session, callback)` where:\n    - `session` - is the session object set via `request.auth.session.set()`.\n    - `callback` - a callback function with the signature `function(err, isValid, credentials)` where:\n        - `err` - an internal error.\n        - `isValid` - `true` if the content of the session is valid, otherwise `false`.\n        - `credentials` - a credentials object passed back to the application in `request.auth.credentials`. If value is `null` or `undefined`,\n          defaults to `session`. If set, will override the current cookie as if `request.auth.session.set()` was called.\n\nWhen the cookie scheme is enabled on a route, the `request.auth.session` objects is decorated with two methods:\n\n- `set(session)` - sets the current session. Must be called after a successful login to begin the session. `session` must be a non-null object,\n  which is set on successful subsequent authentications in `request.auth.credentials`.\n- `clear()` - clears the current session. Used to logout a user.\n\nBecause this scheme decorates the `request` object with session-specific methods, it cannot be registered more than once.\n\n```javascript\nvar Hapi = require('hapi');\n\nvar users = {\n    john: {\n        id: 'john',\n        password: 'password',\n        name: 'John Doe'\n    }\n};\n\nvar home = function (request, reply) {\n\n    reply('<html><head><title>Login page</title></head><body><h3>Welcome '\n      + request.auth.credentials.name\n      + '!</h3><br/><form method=\"get\" action=\"/logout\">'\n      + '<input type=\"submit\" value=\"Logout\">'\n      + '</form></body></html>');\n};\n\nvar login = function (request, reply) {\n\n    if (request.auth.isAuthenticated) {\n        return reply().redirect('/');\n    }\n\n    var message = '';\n    var account = null;\n\n    if (request.method === 'post') {\n\n        if (!request.payload.username ||\n            !request.payload.password) {\n\n            message = 'Missing username or password';\n        }\n        else {\n            account = users[request.payload.username];\n            if (!account ||\n                account.password !== request.payload.password) {\n\n                message = 'Invalid username or password';\n            }\n        }\n    }\n\n    if (request.method === 'get' ||\n        message) {\n\n        return reply('<html><head><title>Login page</title></head><body>'\n            + (message ? '<h3>' + message + '</h3><br/>' : '')\n            + '<form method=\"post\" action=\"/login\">'\n            + 'Username: <input type=\"text\" name=\"username\"><br>'\n            + 'Password: <input type=\"password\" name=\"password\"><br/>'\n            + '<input type=\"submit\" value=\"Login\"></form></body></html>');\n    }\n\n    request.auth.session.set(account);\n    return reply().redirect('/');\n};\n\nvar logout = function (request, reply) {\n\n    request.auth.session.clear();\n    return reply().redirect('/');\n};\n\nvar server = new Hapi.Server('localhost', 8000);\n\nserver.pack.require('hapi-auth-cookie', function (err) {\n\n    server.auth.strategy('session', 'cookie', {\n        password: 'secret',\n        cookie: 'sid-example',\n        redirectTo: '/login',\n        isSecure: false\n    });\n\n    server.route([\n        { method: 'GET', path: '/', config: { handler: home, auth: true } },\n        { method: ['GET', 'POST'], path: '/login', config: { handler: login, auth: { mode: 'try' } } },\n        { method: 'GET', path: '/logout', config: { handler: logout, auth: true } }\n    ]);\n\n    server.start();\n});\n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/spumko/hapi-auth-cookie/issues"
  },
  "homepage": "https://github.com/spumko/hapi-auth-cookie",
  "_id": "hapi-auth-cookie@1.0.3",
  "_shasum": "32a96d060c57664841271b40dcb53ca4bced3f3e",
  "_from": "hapi-auth-cookie@x",
  "_resolved": "https://registry.npmjs.org/hapi-auth-cookie/-/hapi-auth-cookie-1.0.3.tgz"
}
